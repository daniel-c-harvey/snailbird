@using System.Linq.Expressions;
@using Core;
@using RazorCore

@typeparam TModel where TModel : class, new()

@attribute [StreamRendering]

@if (models is null || columnMap is null)
{
    <div>Loading...</div>
}
else
{   
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                @foreach(string caption in Captions)
                {
                <th scope="col">@caption</th>                
                }
            </tr>
        </thead>
        <tbody>
            @foreach (Counted<TModel> model in Models)
            {
                <tr>
                    <th scope="row">@model.Ordinal</th>
                    @foreach (ModelColumnBase<Counted<TModel>> column in Columns)
                    {
                    <td>
                        @if(column.Editable)
                        {
                            <input type="text" class="form-control" @bind:get="column.Getter(model)" @bind:set="(value) => column.Setter(model, value)">
                        }else{
                            <span>@column.Getter(model)</span>
                        }
                    </td>
                    }
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="@(e => Delete(model))">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <button type="button" class="btn btn-primary" @onclick="@(e => Add())">
            <i class="bi bi-plus-circle"></i>
        </button>
    </div>
}

@code {
    [Parameter]
    public IEnumerable<TModel>? models { private get; set; }
    [Parameter]
    public IDictionary<string, ModelColumnBase<Counted<TModel>>>? columnMap { private get; set; }

    private IList<Counted<TModel>> _models = new List<Counted<TModel>>();
    private IDictionary<string, ModelColumnBase<Counted<TModel>>> _columnMap = new Dictionary<string, ModelColumnBase<Counted<TModel>>>();

    public IEnumerable<Counted<TModel>> Models => _models;
    public IEnumerable<string> Captions => _columnMap.Keys;
    public IEnumerable<ModelColumnBase<Counted<TModel>>> Columns => _columnMap.Values;

    protected override void OnInitialized()
    {
        if (models is null) throw new ArgumentNullException(nameof(models));
        if (columnMap is null) throw new ArgumentNullException(nameof(columnMap));

        _models = models.ZipCounted().ToList();
        _columnMap = columnMap;
    }

    protected void Add()
    {
        _models.Add(new Counted<TModel> {Ordinal = _models.Count() + 1, Entity = new TModel()});
    }

    protected void Delete(Counted<TModel> model)
    {
        // renumber all the elements after the one being removed
        _models.Skip(model.Ordinal).Apply(m => --m.Ordinal);
        _models.Remove(model);
    }
}
