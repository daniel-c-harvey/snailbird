@using NetBlocks.Models;
@using NetBlocks.Models.Environment
@using RazorCore;
@using RazorCore.Confirmation;
@using RazorCore.Markup;
@using RazorCore.Table;
@using SnailbirdAdminWeb.Client.Models
@using SnailbirdAdminWeb.Client.ViewModels;
@using SnailbirdData.Models.Post;
@using SnailbirdMedia;
@using SnailbirdAdminWeb.Client.ViewModels.EditFlex.Element;

@if (ViewModel != null)
{   
    <!-- Popup Section -->
    @if (ViewModel.ConfirmationViewModel != null)
    {
        <Confirmation @ref="changeConfirmation" ViewModel="@ViewModel.ConfirmationViewModel"/>
    }

    <!-- Element Section -->
    @if (ViewModel.Element != null)
    {   
        <div class="sb-flex-element">
        
            <!-- Flex Element Header -->
            <div class="sb-flex-order">
                <div class="sb-flex-order-buttons">
                    <div class="top bi bi-chevron-compact-up" @onclick="@ViewModel.RaiseAscend" />
                    <div class="bottom bi bi-chevron-compact-down" @onclick="@ViewModel.RaiseDescend" />
                </div>
                <select @bind="@ViewModel.SelectedElementName">
                    @foreach (FlexElement prototype in EditFlexElementViewModel.Prototypes)
                    {
                        <option value="@prototype.TypeCaption">@prototype.TypeCaption</option>
                    }
                </select>
                <button type="button" class="btn btn-danger btn-sm" @onclick="@ViewModel.RaiseDeleteClicked">
                    <span class="bi bi-trash"></span>
                </button>
            </div>

            <hr />

            <!-- Flex Element Content -->
            <div class="sb-flex-content">
                @if (ViewModel.Element is FlexParagraph paragraph)
                {
                    var vm = new EditFlexParagraphViewModel(paragraph);
                    <EditFlexParagraph ViewModel="@vm" />
                } else if (ViewModel.Element is FlexImage image)
                {
                    var vm = new EditFlexImageViewModel(image);
                    <EditFlexImage ViewModel="@vm" />
                } else if (ViewModel.Element is FlexYouTubeEmbed youtubeEmbed)
                {
                    <span>Video Embed Link:</span> <input class="form-control" type="url" @bind="youtubeEmbed.VideosURL" />
                } else if (ViewModel.Element is FlexVimeoEmbed vimeoEmbed)
                {
                    <span>Video Embed Link:</span> <input class="form-control" type="url" @bind="vimeoEmbed.VideoURL" />
                } else if (ViewModel.Element is FlexInstrumentList instrumentList)
                {
                    <NewRowTable TModel="Instrument"
                                 models="instrumentList.Instruments"
                                 columnMap="InstrumentColumns"
                                 OnAdd="i => instrumentList.Instruments.Add(i)"
                                 OnDelete="i => instrumentList.Instruments.Remove(i)" />
                }
            </div>
        </div>
    }
}

@code 
{
    [Parameter]
    public EditFlexElementViewModel? ViewModel { get; set; }

    private static IColumnMap<Instrument> InstrumentColumns = new ColumnMap<Instrument>()
        .AddColumn(
            ColumnKey.Init(typeof(Instrument).GetProperty(nameof(Instrument.Name))),
            new ModelColumn<Instrument, string>(
                inst => inst.Name,
                (inst, name) => inst.Name = name)
            .WithEditable())
        .AddColumn(
            ColumnKey.Init(typeof(Instrument).GetProperty(nameof(Instrument.Description))),
            new ModelColumn<Instrument, string>(
                inst => inst.Description,
                (inst, desc) => inst.Description = desc)
            .WithEditable());

    private Confirmation changeConfirmation = default!;

    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.ConfirmElementChange += ConfirmChange;
            ViewModel.ElementChanged += ElementChanged;
        }
    }

    private void ConfirmChange(object sender, ConfirmEventArgs args)
    {
        changeConfirmation.Open();
    }

    private void ElementChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }
}
