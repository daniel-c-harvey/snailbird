@using SnailbirdAdminWeb.Client.API
@using SnailbirdAdminWeb.Client.ViewModels.EditFlex
@using SnailbirdData.Models.Post;
@using SnailbirdAdminWeb.Client.ViewModels;
@using SnailbirdAdminWeb.Client.Updates
@using SnailbirdMedia.Clients

@typeparam TPost where TPost : FlexPost<TPost>, new()

<PostManager TPost="TPost" 
             TEdit="EditFlexPostViewModel<TPost>"
             TUpdate="FlexPostManagerUpdate<TPost>"
             ViewModel="@ViewModel">
    <AddComponent Context="viewModel">
        <EditFlexPost ViewModel="viewModel" />
    </AddComponent>
    <EditComponent Context="viewModel">
        <EditFlexPost ViewModel="viewModel" />
    </EditComponent>
</PostManager>

@code
{
    [Inject]
    public IServiceProvider? Services { get; set; }

    private FlexPostManagerViewModel<TPost>? ViewModel { get; set; }

    protected override void OnInitialized()
    {
        if (Services is null) throw new ArgumentNullException(nameof(Services));
        var postManagerClient = Services.GetService<IPostManagerClient<TPost>>();
        var mediaClient = Services.GetService<IVaultManagerClient>();
        if (mediaClient is null || postManagerClient is null) return; // Pre-rendering services unavailable; abort
        
        ViewModel = new FlexPostManagerViewModelFactory<TPost>(mediaClient).Create(postManagerClient);
        ViewModel.EditingViewModel = new EditFlexPostViewModel<TPost>(ViewModel.SavePost);
        ViewModel.AddViewModel = new EditFlexPostViewModel<TPost>(ViewModel.SaveNewPost);
    
        base.OnInitialized();
    }
}