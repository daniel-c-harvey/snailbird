@using Core;
@using Core.Converters;
@using DataAccess;
@using System.Collections.ObjectModel;

@typeparam TDatabase
@inject IDataAccess<TDatabase> DataAccess

<div class="connection-chooser">
@if (Connections is null || DatabaseNames is null)
{
    <span>Loading...</span>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col">
                <label>Connection: </label>
            </div>
            <div class="col">
                <select @bind="ConnectionID">
                    @foreach(Connection connection in Connections)
                    {
                        <option value="@connection.ID">@connection.Name</option>
                    }
                </select>
            </div>
            <div class="col">
                <label>Database: </label>
            </div>
            <div class="col">
                <select @bind="DatabaseName">
                    @foreach (string name in DatabaseNames)
                    {
                        <option value="@name">@name</option>
                    }
                </select>
            </div>
        </div>
    </div>
}

</div>

@code {
    private IEnumerable<Connection>? Connections { get; set; }
    private IEnumerable<string>? DatabaseNames { get; set; }

    public Connection? Connection { get; private set; } = new();
    private long ConnectionID 
    { 
        get
        {
            return Connection?.ID ?? 0;
        }
        set
        {
            if (Connections is not null)
            {
                Connection = Connections.FirstOrDefault(c => c.ID == LongConverter.FromString(value.ToString()));
                OnConnectionChange();
            }
        }
    }

    private string _databaseName = String.Empty;
    private string DatabaseName 
    {
        get
        {
            return _databaseName;    
        }
        set
        {
            if (value is not null)
            {
                _databaseName = value;
                OnConnectionChange();
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var connections = ConnectionStringTools.LoadFromFile("./.secrets/connections.json");
        Connections = connections is not null && connections.ConnectionStrings.Any() ? new List<Connection>(connections.ConnectionStrings) : new List<Connection>();

        IEnumerable<string>? names = null;// new string[] {"test", "test2"};
        var nameFetchResult = DataAccess.GetDatabaseNames();

        if (nameFetchResult.Success)
        {
            names = nameFetchResult.Value;
        }
        DatabaseNames = names is not null && names.Any() ? new List<string>(names) : new List<string>();

        StateHasChanged();
    }

    private void OnConnectionChange()
    {
        if (Connection is not null && !string.IsNullOrWhiteSpace(DatabaseName))
        {
            DataAccess.ChangeConnection(Connection, DatabaseName);
        }
    }
}
