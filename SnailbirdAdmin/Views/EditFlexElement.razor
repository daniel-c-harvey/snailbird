@using NetBlocks
@using RazorCore;
@using SnailbirdAdmin.ViewModels;
@using SnailbirdData.Models.Post;

@if (ViewModel != null && ViewModel.Element != null)
{   
    <!-- Popup Section -->
    <Modal @ref="changeConfirmation" 
        HeaderText="Confirm Element Replacement"
        BodyText="The contents of this element will be reset and replaced with a new blank element. Proceed?"
        OnClose="@ViewModel.UpdateSelectedElement"/>

    <!-- Popup Section -->
    <div class="sb-flex-element">
        <div class="sb-flex-order">
            <input type="number" value="@ViewModel.Element.Ordinal" />
            <select @bind="@ViewModel.SelectedElementName">
                @foreach (FlexElement prototype in EditFlexElementViewModel.Prototypes)
                {
                    <option value="@prototype.TypeCaption">@prototype.TypeCaption</option>
                }
            </select>
            <button type="button" class="btn btn-primary">
                <span class="bi bi-trash"></span>
            </button>
        </div>
        <br />
        <div class="sb-flex-content">
            @if (ViewModel.Element is FlexParagraph paragraph)
            {
                <div>
                    <textarea class="form-control" type="text" @bind="@paragraph.Text" />
                </div>
            } else if (ViewModel.Element is FlexImage image)
            {
                <div>
                    <img src="@image.ImageURI" alt="@image.AltText" />
                    <input class="form-control" type="url" @bind="@image.ImageURI" />
                    <input class="form-control" type="url" @bind="@image.AltText" />
                    <button type="button" class="btn btn-primary">
                        <span class="bi bi-folder2"></span>
                    </button>
                </div>
            } else if (ViewModel.Element is FlexYouTubeEmbed youtubeEmbed)
            {
                <span>Video Embed Link:</span> <input class="form-control" type="url" @bind="youtubeEmbed.VideosURL" />
            } else if (ViewModel.Element is FlexInstrumentList instrumentList)
            {
                <NewRowTable TModel="Instrument"
                             models="instrumentList.Instruments"
                             columnMap="InstrumentColumns"
                             OnAdd="i => instrumentList.Instruments.Add(i)"
                             OnDelete="i => instrumentList.Instruments.Remove(i)" />
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public EditFlexElementViewModel? ViewModel { get; set; }

    private static IColumnMap<Instrument> InstrumentColumns = new ColumnMap<Instrument>()
            .AddColumn("Name",
                new ModelColumn<Instrument>(
                    inst => inst.Name,
                    (inst, name) => inst.Name = name)
                .MakeEditable())
            .AddColumn("Description",
                new ModelColumn<Instrument>(
                    inst => inst.Description,
                    (inst, desc) => inst.Description = desc)
                .MakeEditable());

    private Modal changeConfirmation;

    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.ConfirmElementChange += ConfirmChange;
        }
    }

    private void ConfirmChange(object sender, ConfirmEventArgs<string> args)
    {
        changeConfirmation.Open(args.NewValue);
    }
}
